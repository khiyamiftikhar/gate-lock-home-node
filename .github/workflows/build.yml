name: ESP-IDF CI
on:
  push:
    branches:
      - main
    tags:        # ‚Üê NEW: Trigger on version tags
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [esp32, esp32c3]
   
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # ‚Üê NEW: Extract version from git tag or generate dev version
      - name: Get Version from Tag
        run: |
          if git describe --exact-match --tags HEAD 2>/dev/null; then
            VERSION=$(git describe --exact-match --tags HEAD)
            BUILD_TYPE="release"
            IS_RELEASE="true"
          else
            VERSION=$(git describe --tags --always --dirty)-dev
            BUILD_TYPE="dev"
            IS_RELEASE="false"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "BUILD_TYPE=${BUILD_TYPE}" >> $GITHUB_ENV
          echo "IS_RELEASE=${IS_RELEASE}" >> $GITHUB_ENV
          echo "üè∑Ô∏è Building version: ${VERSION} (${BUILD_TYPE})"
      
      # Add this step after "Get Version from Tag" to test your logic
      - name: Debug Version Logic
        run: |
          echo "üîç Current branch: ${{ github.ref }}"
          echo "üîç Event type: ${{ github.event_name }}"
          echo "üîç Is tag push: $(echo '${{ github.ref }}' | grep -q '^refs/tags/' && echo 'YES' || echo 'NO')"
          
          # Test what would happen with a real tag
          echo "üìù Simulating version scenarios:"
          
          echo "Current scenario (actual):"
          echo "  VERSION: ${{ env.VERSION }}"
          echo "  BUILD_TYPE: ${{ env.BUILD_TYPE }}" 
          echo "  IS_RELEASE: ${{ env.IS_RELEASE }}"
          
          # Show what files are created
          echo "üìÅ Generated artifacts:"
          ls -la firmware_${{ matrix.target }}/flash_info.txt || echo "No flash_info.txt found"
                
      # Cache ESP-IDF installation
      - name: Cache ESP-IDF
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/esp-idf
          key: esp-idf-${{ hashFiles('**/CMakeLists.txt') }}-${{ github.ref }}
          restore-keys: |
            esp-idf-

      # Cache build output
      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: build_${{ matrix.target }}
          key: build-${{ matrix.target }}-${{ hashFiles('main/**/*.c', 'main/**/*.h', 'components/**', 'CMakeLists.txt', 'sdkconfig.${{ matrix.target }}') }}
          restore-keys: |
            build-${{ matrix.target }}-

      # Build project using official esp-idf-ci-action
      - name: Build ${{ matrix.target }}
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: v5.4.2
          target: ${{ matrix.target }}
          path: .  # your project root
          command: idf.py -B build_${{ matrix.target }} -DIDF_TARGET=${{ matrix.target }} -DSDKCONFIG=sdkconfig.${{ matrix.target }} build

      # Archive firmware
      - name: Archive firmware
        run: |
          mkdir -p firmware_${{ matrix.target }}
          cp build_${{ matrix.target }}/*.bin firmware_${{ matrix.target }}/
          cp build_${{ matrix.target }}/*.elf firmware_${{ matrix.target }}/
          cp build_${{ matrix.target }}/partition_table/partition-table.bin firmware_${{ matrix.target }}/
          cp build_${{ matrix.target }}/bootloader/bootloader.bin firmware_${{ matrix.target }}/
          cp build_${{ matrix.target }}/flash_args firmware_${{ matrix.target }}/ 2>/dev/null || echo "flash_args not found, skipping"
          cp build_${{ matrix.target }}/flasher_args.json firmware_${{ matrix.target }}/ 2>/dev/null || echo "flasher_args.json not found, skipping"
          cp build_${{ matrix.target }}/project_description.json firmware_${{ matrix.target }}/ 2>/dev/null || echo "project_description.json not found, skipping"
          
          # ‚Üê ENHANCED: Add version info to flash_info.txt
          cat > firmware_${{ matrix.target }}/flash_info.txt << EOF
          version=${{ env.VERSION }}
          build_type=${{ env.BUILD_TYPE }}
          target=${{ matrix.target }}
          idf_version=v5.4.2
          build_time=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          commit_sha=${{ github.sha }}
          workflow_run=${{ github.run_number }}
          EOF
          
      # ‚Üê NEW: Create OTA-ready firmware file (for releases only)
      - name: Create OTA firmware file
        if: env.IS_RELEASE == 'true'
        run: |
          # Copy main firmware binary with version in filename
          cp build_${{ matrix.target }}/$(ls build_${{ matrix.target }}/ | grep "\.bin$" | grep -v bootloader | grep -v partition-table | head -1) \
             firmware-ota-${{ matrix.target }}-${{ env.VERSION }}.bin
          echo "üì¶ Created OTA file: firmware-ota-${{ matrix.target }}-${{ env.VERSION }}.bin"
          ls -la firmware-ota-${{ matrix.target }}-${{ env.VERSION }}.bin

      # ‚Üê NEW: Create OTA manifest file
      - name: Create OTA manifest
        if: env.IS_RELEASE == 'true'
        run: |
          cat > ota-manifest-${{ matrix.target }}.json << EOF
          {
            "version": "${{ env.VERSION }}",
            "target": "${{ matrix.target }}",
            "firmware_url": "https://github.com/${{ github.repository }}/releases/download/${{ env.VERSION }}/firmware-ota-${{ matrix.target }}-${{ env.VERSION }}.bin",
            "firmware_size": $(stat -c%s firmware-ota-${{ matrix.target }}-${{ env.VERSION }}.bin),
            "checksum": "$(sha256sum firmware-ota-${{ matrix.target }}-${{ env.VERSION }}.bin | cut -d' ' -f1)",
            "release_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "changelog_url": "https://github.com/${{ github.repository }}/releases/tag/${{ env.VERSION }}"
          }
          EOF
          echo "üìã Created manifest: ota-manifest-${{ matrix.target }}.json"
          cat ota-manifest-${{ matrix.target }}.json
         
      # Upload firmware artifacts (regular workflow)
      - name: Archive firmware
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-firmware-${{ env.VERSION }}
          path: firmware_${{ matrix.target }}/
          retention-days: 7

      # ‚Üê NEW: Upload OTA files as separate artifacts
      - name: Archive OTA files
        if: env.IS_RELEASE == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-ota-${{ env.VERSION }}
          path: |
            firmware-ota-${{ matrix.target }}-${{ env.VERSION }}.bin
            ota-manifest-${{ matrix.target }}.json
          retention-days: 30

  # ‚Üê NEW: Create GitHub Release (only for tags)
  create-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')  # Only run for version tags
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
       
      - name: Get Version
        run: |
          VERSION=$(git describe --exact-match --tags HEAD)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
         
      - name: Generate Changelog
        run: |
          # Get previous tag for changelog
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREV_TAG" ]; then
            echo "## Changes since $PREV_TAG:" > CHANGELOG.md
            git log --oneline --no-merges $PREV_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            echo "First tagged release of the firmware." >> CHANGELOG.md
          fi
         
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
         
      - name: Prepare release files
        run: |
          mkdir -p release_files
         
          # Create complete firmware packages (ZIP files for testing)
          for target in esp32 esp32c3; do
            if [ -d "artifacts/${target}-firmware-${{ env.VERSION }}" ]; then
              cd "artifacts/${target}-firmware-${{ env.VERSION }}"
              zip -r "../../release_files/firmware-complete-${target}-${{ env.VERSION }}.zip" .
              cd ../..
              echo "üì¶ Created: firmware-complete-${target}-${{ env.VERSION }}.zip"
            fi
          done
         
          # Move OTA files and manifests
          find artifacts/ -name "firmware-ota-*-${{ env.VERSION }}.bin" -exec cp {} release_files/ \;
          find artifacts/ -name "ota-manifest-*.json" -exec cp {} release_files/ \;
          
          # ‚Üê NEW: Create latest manifest files (stable URLs)
          for target in esp32 esp32c3; do
            if [ -f "release_files/ota-manifest-${target}.json" ]; then
              cp "release_files/ota-manifest-${target}.json" "release_files/ota-manifest-${target}-latest.json"
              echo "üìã Created: ota-manifest-${target}-latest.json"
            fi
          done
         
          ls -la release_files/
         
      - name: Create Draft Release
        uses: softprops/action-gh-release@v1
        with:
          name: "${{ env.VERSION }} (‚è≥ Testing Required)"
          body_path: CHANGELOG.md
          draft: true  # ‚Üê IMPORTANT: Creates draft release
          prerelease: false
          files: release_files/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}