name: ESP-IDF CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ESP_IDF_VERSION: v5.4.2
  IDF_TOOLS_PATH: ${{ github.workspace }}/esp-tools
  IDF_PATH: ${{ github.workspace }}/esp-idf

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [esp32, esp32c3]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # More specific ESP-IDF cache with better key
      - name: Cache ESP-IDF and tools
        id: cache-esp-idf
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.IDF_PATH }}
            ${{ env.IDF_TOOLS_PATH }}
            ~/.espressif
          key: esp-idf-${{ env.ESP_IDF_VERSION }}-${{ runner.os }}-v2
          restore-keys: |
            esp-idf-${{ env.ESP_IDF_VERSION }}-${{ runner.os }}-
            esp-idf-${{ env.ESP_IDF_VERSION }}-
      
      # Only install ESP-IDF if cache miss
      - name: Install ESP-IDF
        if: steps.cache-esp-idf.outputs.cache-hit != 'true'
        uses: espressif/install-esp-idf-action@v1
        with:
          version: ${{ env.ESP_IDF_VERSION }}
          path: ${{ env.IDF_PATH }}
          tools-path: ${{ env.IDF_TOOLS_PATH }}
      
      # Setup ESP-IDF environment (always needed)
      - name: Setup ESP-IDF environment
        if: steps.cache-esp-idf.outputs.cache-hit == 'true'
        run: |
          # Source the activation script
          source $HOME/.espressif/tools/activate_idf_${{ env.ESP_IDF_VERSION }}.sh
          # Export environment variables for subsequent steps
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "IDF_PATH=$IDF_PATH" >> $GITHUB_ENV
          echo "ESP_IDF_VERSION=$ESP_IDF_VERSION" >> $GITHUB_ENV
          echo "IDF_TOOLS_PATH=$IDF_TOOLS_PATH" >> $GITHUB_ENV
      
      # Enhanced ccache setup with better configuration
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-${{ matrix.target }}-${{ hashFiles('main/**', 'components/**', 'CMakeLists.txt') }}
          restore-keys: |
            ccache-${{ matrix.target }}-
            ccache-
          max-size: 300M
          create-symlink: true
      
      # Target-specific build cache with better key
      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: build_${{ matrix.target }}
          key: build-${{ matrix.target }}-${{ hashFiles('main/**/*.c', 'main/**/*.h', 'components/**', 'CMakeLists.txt', 'sdkconfig.${{ matrix.target }}', 'partitions.csv') }}-${{ env.ESP_IDF_VERSION }}
          restore-keys: |
            build-${{ matrix.target }}-${{ hashFiles('main/**/*.c', 'main/**/*.h', 'components/**', 'CMakeLists.txt') }}-
            build-${{ matrix.target }}-
      
      # Configure ccache for optimal performance
      - name: Configure ccache
        run: |
          ccache --set-config=cache_dir=$HOME/.ccache
          ccache --set-config=max_size=300M
          ccache --set-config=compression=true
          ccache --set-config=sloppiness=file_macro,time_macros,include_file_mtime
          ccache --zero-stats
      
      # Build project with optimizations
      - name: Build project
        run: |
          # Ensure ccache is in PATH and configured
          export CCACHE_DIR=$HOME/.ccache
          export CC="ccache gcc"
          export CXX="ccache g++"
          
          # Set parallel build jobs via environment variable
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          
          # Build with target-specific configuration
          idf.py -B build_${{ matrix.target }} \
                 -DIDF_TARGET=${{ matrix.target }} \
                 -DSDKCONFIG=sdkconfig.${{ matrix.target }} \
                 build
      
      # Show ccache statistics
      - name: Show ccache stats
        run: ccache --show-stats
      
      # Create comprehensive firmware package
      - name: Create firmware package
        run: |
          mkdir -p firmware_${{ matrix.target }}
          
          # Copy essential files
          cp CMakeLists.txt firmware_${{ matrix.target }}/
          
          # Copy build artifacts with error handling
          BUILD_DIR="build_${{ matrix.target }}"
          
          # Main firmware files
          find $BUILD_DIR -name "*.bin" -exec cp {} firmware_${{ matrix.target }}/ \;
          find $BUILD_DIR -name "*.elf" -maxdepth 1 -exec cp {} firmware_${{ matrix.target }}/ \;
          
          # Partition and bootloader
          [ -f "$BUILD_DIR/partition_table/partition-table.bin" ] && cp "$BUILD_DIR/partition_table/partition-table.bin" firmware_${{ matrix.target }}/
          [ -f "$BUILD_DIR/bootloader/bootloader.bin" ] && cp "$BUILD_DIR/bootloader/bootloader.bin" firmware_${{ matrix.target }}/
          
          # Flash configuration files
          [ -f "$BUILD_DIR/flash_args" ] && cp "$BUILD_DIR/flash_args" firmware_${{ matrix.target }}/
          [ -f "$BUILD_DIR/flasher_args.json" ] && cp "$BUILD_DIR/flasher_args.json" firmware_${{ matrix.target }}/
          [ -f "$BUILD_DIR/project_description.json" ] && cp "$BUILD_DIR/project_description.json" firmware_${{ matrix.target }}/
          
          # Create build info
          cat > firmware_${{ matrix.target }}/build_info.txt << EOF
          Target: ${{ matrix.target }}
          IDF Version: ${{ env.ESP_IDF_VERSION }}
          Build Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Commit SHA: ${{ github.sha }}
          Workflow Run: ${{ github.run_number }}
          Build Type: ${{ github.event_name }}
          EOF
          
          # List contents for verification
          echo "Firmware package contents:"
          ls -la firmware_${{ matrix.target }}/
      
      # Upload firmware artifacts with better naming
      - name: Archive firmware
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.target }}-${{ github.run_number }}
          path: firmware_${{ matrix.target }}/
          retention-days: 13
          compression-level: 6