name: ESP-IDF CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [esp32, esp32c3]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache ESP-IDF installation
      - name: Cache ESP-IDF
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/esp-idf
            ${{ github.workspace }}/esp-tools
          key: esp-idf-${{ hashFiles('**/CMakeLists.txt') }}-${{ github.ref }}
          restore-keys: |
            esp-idf-

      # Install ESP-IDF to custom path
      - name: Install ESP-IDF
        uses: espressif/install-esp-idf-action@v1
        with:
          version: v5.4.2
          path: ${{ github.workspace }}/esp-idf
          tools-path: ${{ github.workspace }}/esp-tools

      # Cache build output (target-specific)
      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: build_${{ matrix.target }}
          key: build-${{ matrix.target }}-${{ hashFiles('main/**/*.c', 'main/**/*.h', 'components/**', 'CMakeLists.txt', 'sdkconfig.${{ matrix.target }}') }}
          restore-keys: |
            build-${{ matrix.target }}-

      # Setup ccache for faster compilation
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-${{ matrix.target }}
          max-size: 200M

      # Build project with ccache optimizations
      - name: Build project
        run: |
          export CCACHE_DIR=$HOME/.ccache
          # Build with target-specific configuration
          idf.py -B build_${{ matrix.target }} \
                 -DIDF_TARGET=${{ matrix.target }} \
                 -DSDKCONFIG=sdkconfig.${{ matrix.target }} \
                 build

      # Create comprehensive firmware package
      - name: Create firmware package
        run: |
          mkdir -p firmware_${{ matrix.target }}
          cp CMakeLists.txt firmware_${{ matrix.target }}/
          cp build_${{ matrix.target }}/*.bin firmware_${{ matrix.target }}/
          cp build_${{ matrix.target }}/*.elf firmware_${{ matrix.target }}/
          cp build_${{ matrix.target }}/partition_table/partition-table.bin firmware_${{ matrix.target }}/
          cp build_${{ matrix.target }}/bootloader/bootloader.bin firmware_${{ matrix.target }}/
          cp build_${{ matrix.target }}/flash_args firmware_${{ matrix.target }}/ 2>/dev/null || echo "flash_args not found, skipping"
          cp build_${{ matrix.target }}/flasher_args.json firmware_${{ matrix.target }}/ 2>/dev/null || echo "flasher_args.json not found, skipping"
          cp build_${{ matrix.target }}/project_description.json firmware_${{ matrix.target }}/ 2>/dev/null || echo "project_description.json not found, skipping"
          cat > firmware_${{ matrix.target }}/flash_info.txt << EOF
          target=${{ matrix.target }}
          idf_version=v5.4.2
          build_time=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          commit_sha=${{ github.sha }}
          workflow_run=${{ github.run_number }}
          EOF

      # Upload firmware artifacts
      - name: Archive firmware
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-firmware
          path: firmware_${{ matrix.target }}/
          retention-days: 7
