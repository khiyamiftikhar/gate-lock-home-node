name: ESP-IDF CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ESP_IDF_VERSION: v5.4.2

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [esp32, esp32c3]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Target-specific ESP-IDF cache to avoid race conditions
      - name: Cache ESP-IDF and tools
        id: cache-esp-idf
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/esp-idf
            ${{ github.workspace }}/esp-tools
            ~/.espressif
          key: esp-idf-${{ env.ESP_IDF_VERSION }}-${{ runner.os }}-${{ matrix.target }}
          restore-keys: |
            esp-idf-${{ env.ESP_IDF_VERSION }}-${{ runner.os }}-
            esp-idf-${{ env.ESP_IDF_VERSION }}-
      
      # Install ESP-IDF (works for both cache hit and miss)
      - name: Install ESP-IDF
        uses: espressif/install-esp-idf-action@v1
        with:
          version: ${{ env.ESP_IDF_VERSION }}
          path: ${{ github.workspace }}/esp-idf
          tools-path: ${{ github.workspace }}/esp-tools
      
            # Setup ccache and persist it
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-${{ matrix.target }}-${{ hashFiles('main/**', 'components/**', 'CMakeLists.txt') }}
          restore-keys: |
            ccache-${{ matrix.target }}-
            ccache-
          max-size: 300M
          create-symlink: true

      # Configure ccache
      - name: Configure ccache
        run: |
          ccache --set-config=cache_dir=$HOME/.ccache
          ccache --set-config=max_size=300M
          ccache --set-config=compression=true
          ccache --set-config=sloppiness=file_macro,time_macros,include_file_mtime
          echo "== ccache stats before build =="
          ccache --zero-stats
          ccache --show-stats

      # Build project with optimizations
      - name: Build project
        run: |
          # Configure build environment
          export CCACHE_DIR=$HOME/.ccache
          export IDF_CCACHE_ENABLE=1
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)

          # Build with target-specific configuration
          idf.py -B build_${{ matrix.target }} \
                 -DIDF_TARGET=${{ matrix.target }} \
                 -DSDKCONFIG=sdkconfig.${{ matrix.target }} \
                 build

      # Show ccache stats after build
      - name: Show ccache stats
        run: ccache --show-stats

      # Show build statistics
      - name: Show build stats
        run: |
          echo "=== ccache statistics ==="
          ccache --show-stats
          echo "=== Build size info ==="
          ls -lh build_${{ matrix.target }}/*.bin 2>/dev/null || echo "No .bin files found"
      
      # Create firmware package
      - name: Create firmware package
        run: |
          mkdir -p firmware_${{ matrix.target }}
          BUILD_DIR="build_${{ matrix.target }}"
          
          # Copy essential files
          cp CMakeLists.txt firmware_${{ matrix.target }}/
          
          # Copy build artifacts
          find $BUILD_DIR -name "*.bin" -exec cp {} firmware_${{ matrix.target }}/ \;
          find $BUILD_DIR -name "*.elf" -maxdepth 1 -exec cp {} firmware_${{ matrix.target }}/ \;
          
          # Copy partition and bootloader files
          [ -f "$BUILD_DIR/partition_table/partition-table.bin" ] && \
            cp "$BUILD_DIR/partition_table/partition-table.bin" firmware_${{ matrix.target }}/
          [ -f "$BUILD_DIR/bootloader/bootloader.bin" ] && \
            cp "$BUILD_DIR/bootloader/bootloader.bin" firmware_${{ matrix.target }}/
          
          # Copy flash configuration files
          for file in flash_args flasher_args.json project_description.json; do
            [ -f "$BUILD_DIR/$file" ] && cp "$BUILD_DIR/$file" firmware_${{ matrix.target }}/
          done
          
          # Create build info
          cat > firmware_${{ matrix.target }}/build_info.txt << EOF
          Target: ${{ matrix.target }}
          IDF Version: ${{ env.ESP_IDF_VERSION }}
          Build Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Commit SHA: ${{ github.sha }}
          Workflow Run: ${{ github.run_number }}
          Cache Hit: ${{ steps.cache-esp-idf.outputs.cache-hit }}
          EOF
          
          # Show package contents
          echo "Firmware package contents for ${{ matrix.target }}:"
          ls -la firmware_${{ matrix.target }}/
      
      # Upload firmware artifacts
      - name: Archive firmware
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.target }}-${{ github.run_number }}
          path: firmware_${{ matrix.target }}/
          retention-days: 13
          compression-level: 6